<Page x:Class="GigaBike.PlanningPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:GigaBike"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      Title="PlanningPage">
    <Page.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD" />
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070" />
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD" />
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1" />
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6" />
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B" />
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />
        <Style x:Key="RoundedButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
            <Setter Property="Background" Value="#FFF6F6F6" />
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="FontSize" Value="20" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="20" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true" OpacityMask="White">
                            <Border.Effect>
                                <DropShadowEffect />
                            </Border.Effect>
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}" />
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Page.Resources>
    <Viewbox>
        <Grid Width="871" Height="494">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="435*" />
                <ColumnDefinition Width="435*"/>
                <ColumnDefinition Width="2*" />
            </Grid.ColumnDefinitions>
            <Button x:Name="ButtonAddToPlanning_" Panel.ZIndex="1" Style="{DynamicResource RoundedButtonStyle}" Click="ButtonAddToPlanning" FontSize="20" FontFamily="Arial" FontWeight="Bold" FontStyle="Normal" HorizontalAlignment="Center" VerticalAlignment="Top" SnapsToDevicePixels="True" Background="#FFD0D4D4" Height="60" Width="250" Content="Add to Planning" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Margin="0,313,0,0" Grid.ColumnSpan="2" />
            <Button x:Name="ButtonSavePlanning_" Panel.ZIndex="1" Style="{DynamicResource RoundedButtonStyle}" Click="ButtonSavePlanning" FontSize="25" FontFamily="Arial" FontWeight="Bold" FontStyle="Normal" HorizontalAlignment="Right" VerticalAlignment="Top" SnapsToDevicePixels="True" Background="#FFD0D4D4" Height="60" Width="250" Margin="0,397,150,0" Content="Save Planning" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" />
            <Label x:Name="PlanningLabel_" Content="Planning" Height="62" VerticalAlignment="Top" HorizontalAlignment="Left" Width="871" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" FontFamily="Arial Rounded MT Bold" FontSize="45" Grid.ColumnSpan="3"/>
            <Button x:Name="ButtonGoBackToRessource__" Panel.ZIndex="1" Style="{DynamicResource RoundedButtonStyle}" FontSize="25" FontFamily="Arial" FontWeight="Bold" FontStyle="Normal" HorizontalAlignment="Left" VerticalAlignment="Top" SnapsToDevicePixels="True" Background="#FFD0D4D4" Height="60" Width="250" Margin="150,397,0,0" Content="Go back" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Grid.Column="1" Click="ButtonGoBackToRessource" />
            <DataGrid x:Name="DataGridPlanning" ColumnWidth="*" Grid.ColumnSpan="2" Height="188" Margin="35,88,34,0" VerticalAlignment="Top" MaxColumnWidth="150" CanUserSortColumns="False" MinColumnWidth="30" AutoGenerateColumns="False" IsReadOnly="False" SelectionChanged="DataGridPlanning_SelectionChanged">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Order number" Binding="{Binding IdOrder}"/>
                    <DataGridTextColumn Header="Bike" Binding="{Binding Bike.Name}"/>
                    <DataGridTextColumn Header="Size" Binding="{Binding Bike.Size.Name}"/>
                    <DataGridTextColumn Header="Color" Binding="{Binding Bike.Color.Name}"/>
                    <DataGridTemplateColumn Header="Delivery date" IsReadOnly="False">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding DeliveryDate, StringFormat='dd/MM/yyyy'}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <DatePicker SelectedDate="{Binding DeliveryDate}" SelectedDateChanged="SelectedDateChanged"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Slot">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ComboBox IsEditable="True" IsSynchronizedWithCurrentItem="False" ItemsSource="{Binding Path=SlotAvailable}"  SelectedValue="{Binding SelectedSlot, Mode=TwoWay}" Text="{Binding Path=SelectedSlot}" Validation.ErrorTemplate="{x:Null}" SelectionChanged="OnSlotChanged" PreviewMouseDown="OnPreviewMouseDown" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridComboBoxColumn Header="Is Ready" x:Name="IsOrderReady" SelectedValueBinding="{Binding SelectedReadyState, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <DataGridComboBoxColumn.EditingElementStyle>
                            <Style TargetType="{x:Type ComboBox}">
                                <EventSetter Event="SelectionChanged" Handler="OnValueReadyStateChanged" />
                            </Style>
                        </DataGridComboBoxColumn.EditingElementStyle>
                    </DataGridComboBoxColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
    </Viewbox>
</Page>
